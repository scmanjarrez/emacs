#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <netdb.h>
#include <unistd.h>
#include <stdbool.h>

typedef struct sockaddr_in SOCKADDR_IN;

typedef struct myStruct
{
  int op;
}MY;

typedef struct topic
{
  char tp_nam[64];
  int mem_sz;
  SOCKADDR_IN *mem;
} TOPIC;

int main()
{

  SOCKADDR_IN ss1;
  SOCKADDR_IN ss2;
  alta_usuario(&ss1, 201);
  alta_usuario(&ss2, 202);












}

int alta_usuario(SOCKADDR_IN *cli_addr, int port)
{
  cli_addr->sin_port = htons(port);
  
  /* Si ya existe usuario error */
  if(buscar_usuario(cli_addr)!=-1)
    return -1;
  
  /* Lo a√±adimos a la lista de suscriptores */
  memcpy(&(suscr[n_suscr].susc_info), cli_addr, sizeof(SOCKADDR_IN));
  suscr = realloc(suscr, (1+n_suscr)*sizeof(SUSCR));
  n_suscr++;

  TOPIC_MSG msg;
  bzero((char*)&msg, sizeof(TOPIC_MSG));

  msg.op = NOTIF;
  int i;
  for(i=0; i<n_topics; i++)
    {
      sprintf(msg.tp_nam, "%s", topics[i].tp_nam);
      send_message(&msg, cli_addr);
    }
  
  return 0;
}
